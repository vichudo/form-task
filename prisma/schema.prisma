generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id               String     @id @default(cuid()) @map("_id")
    name             String?
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt
    email            String?    @unique
    emailVerified    DateTime?
    subscriptionPlan String     @default("free")
    validUntil       DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    UserLogin        UserLogin?
    Workspace        Workspace? @relation(fields: [workspaceId], references: [id])
    workspaceId      String?
    FormData         FormData[]

    @@map("users")
}

model UserLogin {
    id           String @id @default(cuid()) @map("_id")
    email        String @unique
    passwordHash String
    userId       String @unique
    user         User   @relation(fields: [userId], references: [id])

    @@map("userlogins")
}

model VerificationToken {
    identifier String   @id @default(cuid()) @map("_id")
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Workspace {
    id       String     @id @default(cuid()) @map("_id")
    name     String?
    users    User[]
    FormData FormData[]
}

model FormData {
    id              String      @id @default(cuid()) @map("_id")
    rut             String?
    nombre_completo String?
    telefono        String?
    direccion       String?
    comuna          String?
    region          String?
    nacionalidad    String?
    mail            String?
    instagram       String?
    facebook        String?
    twitter         String?
    etiqueta_1      String?
    etiqueta_2      String?
    etiqueta_3      String?
    comentario      String?
    workspaceId     String?
    workspace       Workspace?  @relation(fields: [workspaceId], references: [id])
    user            User?       @relation(fields: [userId], references: [id])
    userId          String?
    padronDataId    String?
    padron          PadronData? @relation(fields: [padronDataId], references: [id])

    @@map("formdata")
}

model PadronData {
    id                   String     @id @default(cuid()) @map("_id")
    NOMBRES              String?
    APELLIDO_PATERNO     String?
    APELLIDO_MATERNO     String?
    RUN                  String?
    DV                   String?
    SEXO                 String?
    CALLE                String?
    NUMERO               String?
    LETRA                String?
    RESTO_DOMICILIO      String?
    GLOSACIRCUNSCRIPCION String?
    GLOSACOMUNA          String?
    GLOSAPROVINCIA       String?
    GLOSAREGION          String?
    GLOSAPAIS            String?
    MESA                 String?
    FormData             FormData[]

    @@index([RUN])
    @@map("padrondata")
}
